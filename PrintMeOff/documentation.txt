Text Printer Compiler Documentation

Overview

The Text Printer Compiler is a custom compiler designed specifically for parsing and executing a unique syntax used for printing text to the console. The syntax allows controlled character selection and formatting, including uppercase and lowercase transitions.

Syntax Rules

The syntax follows a structured format using curly braces {} to define segments and additional special characters for transformations.

Basic Structure

{repeat_count[character_rules]} &+ {repeat_count[character_rules]} nextlineplz

{}: Encloses a segment.

repeat_count: A number indicating how many times the segment should be repeated.

character_rules: Defines how each character is processed.

&+: Separates different segments.

nextlineplz: Moves the output to a new line.

Character Processing

Within a segment:

Uppercase Letters: Enclosed in double quotes ("H").

Lowercase Letters: Enclosed in single quotes ('e').

Case Transition (;): Switches from uppercase to lowercase and vice versa.

Same Case Transition (,): Moves to the next letter while maintaining the same case.

Character Chain (|): Moves to the next character but does not print anything.

Ignore (:): Has no effect but can be used for clarity.

Example

Input Code:

{1["H"|:;'e']}&+{2['l']}&+{1['o']}nextlineplz

Output:

Hello

Implementation Details

The compiler consists of two main functions:

parse_segment(segment)

This function:

Extracts the repeat_count and character_rules from a segment.

Processes characters while handling special characters (|, :, ;, ,).

Returns the processed string, repeated as specified.

compile_and_run(code)

This function:

Splits the input string into segments using &+ as a delimiter.

Calls parse_segment() for each segment.

Prints the final output, handling new lines where nextlineplz appears.

Error Handling

Invalid segment format: If the segment does not match the expected structure, a SyntaxError is raised.

Misplaced case transition character: If ; or , is used without a preceding valid character, an error is raised.

Example Usage

code = "{1["H"|:;'e']}&+{2['l']}&+{1['o']}nextlineplz"
compile_and_run(code)

Expected Output:

Hello

Conclusion

This compiler provides a structured way to print text while enforcing strict syntax rules. Users must adhere to the specified format to avoid errors.

